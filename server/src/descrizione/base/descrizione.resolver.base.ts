/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDescrizioneArgs } from "./CreateDescrizioneArgs";
import { UpdateDescrizioneArgs } from "./UpdateDescrizioneArgs";
import { DeleteDescrizioneArgs } from "./DeleteDescrizioneArgs";
import { DescrizioneFindManyArgs } from "./DescrizioneFindManyArgs";
import { DescrizioneFindUniqueArgs } from "./DescrizioneFindUniqueArgs";
import { Descrizione } from "./Descrizione";
import { CapitoloFindManyArgs } from "../../capitolo/base/CapitoloFindManyArgs";
import { Capitolo } from "../../capitolo/base/Capitolo";
import { Opera } from "../../opera/base/Opera";
import { DescrizioneService } from "../descrizione.service";

@graphql.Resolver(() => Descrizione)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DescrizioneResolverBase {
  constructor(
    protected readonly service: DescrizioneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "read",
    possession: "any",
  })
  async _descrizionesMeta(
    @graphql.Args() args: DescrizioneFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Descrizione])
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "read",
    possession: "any",
  })
  async descriziones(
    @graphql.Args() args: DescrizioneFindManyArgs
  ): Promise<Descrizione[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Descrizione, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "read",
    possession: "own",
  })
  async descrizione(
    @graphql.Args() args: DescrizioneFindUniqueArgs
  ): Promise<Descrizione | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Descrizione)
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "create",
    possession: "any",
  })
  async createDescrizione(
    @graphql.Args() args: CreateDescrizioneArgs
  ): Promise<Descrizione> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        operas: args.data.operas
          ? {
              connect: args.data.operas,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Descrizione)
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "update",
    possession: "any",
  })
  async updateDescrizione(
    @graphql.Args() args: UpdateDescrizioneArgs
  ): Promise<Descrizione | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          operas: args.data.operas
            ? {
                connect: args.data.operas,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Descrizione)
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "delete",
    possession: "any",
  })
  async deleteDescrizione(
    @graphql.Args() args: DeleteDescrizioneArgs
  ): Promise<Descrizione | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Capitolo])
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "read",
    possession: "any",
  })
  async capitolo(
    @graphql.Parent() parent: Descrizione,
    @graphql.Args() args: CapitoloFindManyArgs
  ): Promise<Capitolo[]> {
    const results = await this.service.findCapitolo(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Opera, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "read",
    possession: "any",
  })
  async operas(@graphql.Parent() parent: Descrizione): Promise<Opera | null> {
    const result = await this.service.getOperas(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
