/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCapitoloArgs } from "./CreateCapitoloArgs";
import { UpdateCapitoloArgs } from "./UpdateCapitoloArgs";
import { DeleteCapitoloArgs } from "./DeleteCapitoloArgs";
import { CapitoloFindManyArgs } from "./CapitoloFindManyArgs";
import { CapitoloFindUniqueArgs } from "./CapitoloFindUniqueArgs";
import { Capitolo } from "./Capitolo";
import { DescrizioneFindManyArgs } from "../../descrizione/base/DescrizioneFindManyArgs";
import { Descrizione } from "../../descrizione/base/Descrizione";
import { CapitoloService } from "../capitolo.service";

@graphql.Resolver(() => Capitolo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CapitoloResolverBase {
  constructor(
    protected readonly service: CapitoloService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "read",
    possession: "any",
  })
  async _capitolosMeta(
    @graphql.Args() args: CapitoloFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Capitolo])
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "read",
    possession: "any",
  })
  async capitolos(
    @graphql.Args() args: CapitoloFindManyArgs
  ): Promise<Capitolo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Capitolo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "read",
    possession: "own",
  })
  async capitolo(
    @graphql.Args() args: CapitoloFindUniqueArgs
  ): Promise<Capitolo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Capitolo)
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "create",
    possession: "any",
  })
  async createCapitolo(
    @graphql.Args() args: CreateCapitoloArgs
  ): Promise<Capitolo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Capitolo)
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "update",
    possession: "any",
  })
  async updateCapitolo(
    @graphql.Args() args: UpdateCapitoloArgs
  ): Promise<Capitolo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Capitolo)
  @nestAccessControl.UseRoles({
    resource: "Capitolo",
    action: "delete",
    possession: "any",
  })
  async deleteCapitolo(
    @graphql.Args() args: DeleteCapitoloArgs
  ): Promise<Capitolo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Descrizione])
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "read",
    possession: "any",
  })
  async descriziones(
    @graphql.Parent() parent: Capitolo,
    @graphql.Args() args: DescrizioneFindManyArgs
  ): Promise<Descrizione[]> {
    const results = await this.service.findDescriziones(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
