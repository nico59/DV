/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMuseoArgs } from "./CreateMuseoArgs";
import { UpdateMuseoArgs } from "./UpdateMuseoArgs";
import { DeleteMuseoArgs } from "./DeleteMuseoArgs";
import { MuseoFindManyArgs } from "./MuseoFindManyArgs";
import { MuseoFindUniqueArgs } from "./MuseoFindUniqueArgs";
import { Museo } from "./Museo";
import { OperaFindManyArgs } from "../../opera/base/OperaFindManyArgs";
import { Opera } from "../../opera/base/Opera";
import { MuseoService } from "../museo.service";

@graphql.Resolver(() => Museo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MuseoResolverBase {
  constructor(
    protected readonly service: MuseoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "read",
    possession: "any",
  })
  async _museosMeta(
    @graphql.Args() args: MuseoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Museo])
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "read",
    possession: "any",
  })
  async museos(@graphql.Args() args: MuseoFindManyArgs): Promise<Museo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Museo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "read",
    possession: "own",
  })
  async museo(
    @graphql.Args() args: MuseoFindUniqueArgs
  ): Promise<Museo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Museo)
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "create",
    possession: "any",
  })
  async createMuseo(@graphql.Args() args: CreateMuseoArgs): Promise<Museo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Museo)
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "update",
    possession: "any",
  })
  async updateMuseo(
    @graphql.Args() args: UpdateMuseoArgs
  ): Promise<Museo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Museo)
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "delete",
    possession: "any",
  })
  async deleteMuseo(
    @graphql.Args() args: DeleteMuseoArgs
  ): Promise<Museo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Opera])
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "read",
    possession: "any",
  })
  async operas(
    @graphql.Parent() parent: Museo,
    @graphql.Args() args: OperaFindManyArgs
  ): Promise<Opera[]> {
    const results = await this.service.findOperas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
