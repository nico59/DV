/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOperaArgs } from "./CreateOperaArgs";
import { UpdateOperaArgs } from "./UpdateOperaArgs";
import { DeleteOperaArgs } from "./DeleteOperaArgs";
import { OperaFindManyArgs } from "./OperaFindManyArgs";
import { OperaFindUniqueArgs } from "./OperaFindUniqueArgs";
import { Opera } from "./Opera";
import { Descrizione } from "../../descrizione/base/Descrizione";
import { Museo } from "../../museo/base/Museo";
import { OperaService } from "../opera.service";

@graphql.Resolver(() => Opera)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OperaResolverBase {
  constructor(
    protected readonly service: OperaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "read",
    possession: "any",
  })
  async _operasMeta(
    @graphql.Args() args: OperaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Opera])
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "read",
    possession: "any",
  })
  async operas(@graphql.Args() args: OperaFindManyArgs): Promise<Opera[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Opera, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "read",
    possession: "own",
  })
  async opera(
    @graphql.Args() args: OperaFindUniqueArgs
  ): Promise<Opera | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opera)
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "create",
    possession: "any",
  })
  async createOpera(@graphql.Args() args: CreateOperaArgs): Promise<Opera> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        descrizione: args.data.descrizione
          ? {
              connect: args.data.descrizione,
            }
          : undefined,

        museo: {
          connect: args.data.museo,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opera)
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "update",
    possession: "any",
  })
  async updateOpera(
    @graphql.Args() args: UpdateOperaArgs
  ): Promise<Opera | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          descrizione: args.data.descrizione
            ? {
                connect: args.data.descrizione,
              }
            : undefined,

          museo: {
            connect: args.data.museo,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Opera)
  @nestAccessControl.UseRoles({
    resource: "Opera",
    action: "delete",
    possession: "any",
  })
  async deleteOpera(
    @graphql.Args() args: DeleteOperaArgs
  ): Promise<Opera | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Descrizione, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Descrizione",
    action: "read",
    possession: "any",
  })
  async descrizione(
    @graphql.Parent() parent: Opera
  ): Promise<Descrizione | null> {
    const result = await this.service.getDescrizione(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Museo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Museo",
    action: "read",
    possession: "any",
  })
  async museo(@graphql.Parent() parent: Opera): Promise<Museo | null> {
    const result = await this.service.getMuseo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
